"version": "0.6.0"
github-url: "https://github.com/davidtheclark/scut/blob/v"
github-home: "https://github.com/davidtheclark/scut"
codepen-url: "http://codepen.io/davidtheclark/pen/yCadJ"

categories:

  # General item fields --
  # name: Underscores translate to spaces; hyphens stay hyphens.
  #   The utility's example stylesheet's filename should match
  #   the `name` provided here.
  # type: Use one of the existing types.
  # use-name: The name of the mixin/placeholder -- what the user
  #   will actually type, including the scut- prefix.
  # args: A list of arguments, in order. Each argument includes
  #   the following fields:
  #   - variable: The name of the variable, including the $ sign
  #     at the beginning.
  #   - default: Any default value. If there is no default, do not
  #     include this field. If the value is 0 or false, make sure
  #     to wrap it in quotation marks, or YAML won't get it.
  #   - comment (markdown): A comment about the variable.
  # contentblock: If the mixin accepts a content block, explain here
  #    what that content block will affect.
  # text (markdown): Text to explain the utility.
  # example:
  #   - html: The HTML code for the example
  #   - show-html: Set to `true` if the HTML should be shown in the
  #     example.
  #   *** A STYLESHEET FOR THE EXAMPLE IS EXPECTED IN
  #     `DOCS/DEV/ASSETS/SCSS/EXAMPLES` WITH THE SAME NAME AS THAT
  #     GIVEN TO THIS ITEM. Within that stylesheet, code between the
  #     comments `/* hidden rules */` and `/* end hidden rules */`
  #     will not be displayed. ***
  # references:
  #   - description: Display text for the reference link.
  #   - url: URL for the referene link.

  -
    category: general
    items:

      -
        name: border
        type: &MO mixin only
        use-name: scut-border
        args:
          -
            variable: $style
            comment: |
              A border shorthand value for the border you wish to create.
          -
            variable: $sides
            default: n y
            comment: |
              The sides on which to add your border; a list of 2 or 4. `n` abbreviates `null`, passing no value; `y`, or anything other than `n`, will create a rule. See below for details.
        text: |
          A shorthand for adding a border to multiple sides of an element using a single border shorthand value.

          The `$sides` argument determines which sides get the padding. It parallels the established pattern in vanilla CSS: if a list of two is passed, the first value applies to top and bottom, the second to right and left; if a list of four is passed, the values apply, in order, to top, right, bottom, and left. As elsewhere in Scut, `n` stands for `null` and results in no rule being created. For `scut-border`, `y` (or anything other than `n`) stands for "yes" or `true` and will result in a rule. See the examples below.

          If you don't see the value in this shorthand, please read the explanation of <a href="#margin">`scut-margin`, below</a>, which applies equally to this border mixin.

        example:
          html: |
            <div class="eg-border m-1">Variation 1</div>
            <div class="eg-border m-2">Variation 2</div>
            <div class="eg-border m-3">Variation 3</div>
            <div class="eg-border m-4">Variation 4</div>

      -
        name: circle
        type: *MO
        use-name: scut-circle
        args:
          -
            variable: $size
            comment: One value becomes both `width` and `height`.
          -
            variable: $color
            default: inherit
        compatibility: |
          This utility uses `border-radius`, which is not supported in IE8; so IE8 will just get what it deserves: squares.
        text: |
          Create a CSS circle.

          By default, the circle will inherit the color of its parent's text. Or you can designate a color yourself.

          *If you want to add a border to your circle, you have to declare a color.*
        example:
          html: |
            <div class="eg-circle m-1"></div>
            <div class="eg-circle m-2"></div>
            <div class="eg-circle m-3"></div>

      -
        name: color_swap
        type: *MO
        use-name: scut-color-swap
        args:
          -
            variable: $off
            comment: Color(s) for the "off" state. A list of two values will designate `color` and `background-color`. One value will be interpreted as `color` &mdash; unless the `$bg` argument, below, is set to `true`, in which case it will be `background-color`.
          -
            variable: $on
            comment: Color(s) for the "on" state (`:hover` and `:focus`). One or two values, interpreted the same as `$off`, above.
          -
            variable: $duration
            default: "0"
            comment: The `transition-duration` between `$off` and `$on` states.
          -
            variable: $bg
            default: "false"
            comment: Set to `true` if you want to pass a single color value for the `$off` and `$on` arguments and you want that value interpreted as `background-color`. (By default, a single value will be intepreted as `color`.)
        text: |
          A shorthand for setting two color-states &mdash; involving text `color` and `background-color` &mdash; with the option of adding a transition.

          The "on" state subsumes `:hover` and `:focus`.
        example:
          html: |
            <button class="eg-color-swap m-1">Variation 1</button>
            <button class="eg-color-swap m-2">Variation 2</button>
            <button class="eg-color-swap m-3">Variation 3</button>

      -
        name: hd_breakpoint
        type: *MO
        use-name: scut-hd-bp
        text: |
          Write effective resolution-based `@media`-queries, without trying too hard.

          This mixin uses `-o-min-device-pixel-ratio`, `-webkit-min-device-pixel-ratio`, and `min-resolution`. If you're curious about the choices, read the References below.
        args:
          -
            variable: $ratio
            default: 1.3
            comment: A *minimum* resolution value.
        example:
          html: |
            <p class="eg-hd-bp">If you are using a retina screen, this paragraph's background will be blue &mdash; otherwise, a sad low-definition gray.</p>
        references:
          -
            description: The involved Github discussion that resulted in HTML5 Boilerplate's HiDPI breakpoint
            url: https://github.com/h5bp/html5-boilerplate/issues/1127
          -
            description: Matt Thomas's post about Wordpress's HiDPI breakpoint (implemented in WordPress core 3.5)
            url: http://mattnt.com/2012/11/18/making-sense-of-hidpi-media-queries/

      -
        name: hide_visually
        type: &MP mixin and placeholder (same)
        use-name: scut-hide-visually
        text: |
          Hide an element visually, and effectively remove it from page layout, without hiding it from screen readers. Vital accessibility practice.
        example:
          html: |
            <div class="eg-hide-visually">This element is visually hidden.</div>
            <div>You can't see the element above this one, can you?</div>
          show-html: true
        references:
          -
            description: "Jonathan Snook: \"Hiding Content for Accessibility\""
            url: http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
          -
            description: HTML5 Boilerplate discussion and research
            url: https://github.com/h5bp/html5-boilerplate/issues/194/

      -
        name: image_replacement
        type: *MP
        use-name: scut-image-replace
        text: |
          Include text in the markup but replace it with an image.

          Be warned: you might run into occasional bugs with this method of image-replacement *unless you've also set a `width` on your element.*
        example:
          html: |
            <p>The following image is replacing text:</p>
            <div class="eg-image-replace">This text has been replaced.</div>
          show-html: true
        references:
          -
            description: "L. Jeffrey Zeldman: \"Replacing the -9999px Hack (New Image Replacement)\""
            url: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/

      -
        name: reset
        type: *MO
        use-name: scut-reset
        text: |
          Scut's "reset" is a small set of modular resets, each one an independent mixin. The master mixin, `scut-reset`, calls them all; alternately, you could pick and choose yourself.

          Here's the reasoning: I've found myself implementing the same element-specific resets over and over again, project after project &mdash; making headers semantic rather than presentational; removing all the default button styling (which *never* gets used); and so on. So I decided to start stashing those resets for future projects. That's what `scut-reset` is.

          Click "View Source" to see what the `scut-reset` mixin does and assess whether you would like to include it (or some subset of the reset mixins) in your own project.

          If you *do* want to use `scut-reset`, simply

          <pre class="language-scss"><code>@include scut-reset;</code></pre>

          somewhere in your stylesheet (not nested within any other rulesets).

      -
        name: selected
        type: *MO
        use-name: scut-selected
        args:
          -
            variable: $active
            default: "false"
            comment: Declare whether or not to target the `:active` state, in addition to `:hover` and `:focus`.
        contentblock: |
          A content block passed to this mixin will apply to <i>the selected states</i> (`:hover` and `:focus` &mdash; and, optionally, `:active`).
        text: |
          Apply rules to `:hover` and `:focus` (and, optionally, `:active`) states. Make your site more friendly for touchscreens, keyboard navigators, etc.; account for the various means of targeting elements.
        example:
          html: |
            <p><button class="eg-selected m-1">This following button turns blue on hover and focus</button></p>
            <p><button class="eg-selected m-2">This following button turns blue on hover, focus, and active</button></p>

      -
        name: triangle
        type: &MDP mixin, with a default-values placeholder
        use-name: scut-triangle
        args:
          -
            variable: $direction
            default: right
            comment: "The direction that the triangle points: `up`, `down`, `right`, `left`. Or, for right triangles, the corner of the right angle: `top-right`, `top-left`, `bottom-right` or `bottom-left`."
          -
            variable: $size
            default: 0.75em
            comment: One or two values determining the size of the triangle. One value will make a triangle equally wide and tall. Two values translate to `width` and `height`.
          -
            variable: $color
            default: inherit

        text: |
          Create a wide variety of CSS triangles.

          (The default placeholder extension is a little one pointing right &mdash; the kind you'd see on a "Read More" link.)

          The mixin can produce acute triangles pointing up, down, left, and right; or right triangles with their right angles in the top right, top left, bottom right, and bottom left corners.

          When choosing `width` and `height` values, consider how their ratio will determine the form. For example, to create an equilateral triangle pointing up, you'll want your `height` value to be ~86.6% of your `width` value (1/2 x &radic;3 x `width`). Anybody remember high school geometry?

          The best way to understand this mixin is to play around with it, so besides looking at the examples below, you should [play around with this Codepen Pen](http://codepen.io/davidtheclark/pen/oelbk).
        example:
          html: |
            <p>
              <span class="eg-triangle m-default"></span>
              <span class="eg-triangle m-equilateral"></span>
              <span class="eg-triangle m-top-right"></span>
              <span class="eg-triangle m-bottom-left"></span>
            </p>
            <p>
              <button class="eg-triangle-button m-down">Dropdown</button>
              <button class="eg-triangle-button m-up">Dropdown</button>
              <button class="eg-triangle-button m-more">Read more</button>
            </p>
          show-html: true

  -
    category: layout
    items:
      -
        name: center_absolutely
        type: *MO
        use-name: scut-center-absolutely
        args:
          -
            variable: $dimensions
            comment: |
              A two-value list: the `width` and `height` of the element-to-be-centered (both optional). To bypass either and avoid centering in that dimension, pass `n`. See below.
        text: |
          Center an absolutely positioned element: horizontally, vertically, or both ways.

          *This method only works if the element-to-be-centered has a fixed dimension on the relevant axis* &mdash; fixed width to center horizontally, fixed height to center vertically.

          If you do not want to center horizontally &mdash; only vertically &mdash; pass `n` (short for `null`, "no," "nothing," etc.) for the `width` value. Same goes for height, if you do not want to center vertically. See the examples below for clarification.
        example:
          html: |
            <div class="eg-center-absolutely-container">
              <div class="eg-center-absolutely m-1">Centered both horizontally and vertically</div>
            </div>
            <div class="eg-center-absolutely-container">
              <div class="eg-center-absolutely m-2">Centered only horizontally</div>
            </div>
            <div class="eg-center-absolutely-container">
              <div class="eg-center-absolutely m-3">Centered only vertically</div>
            </div>

      -
        name: center_block
        type: *MDP
        use-name: scut-center-block
        args:
          -
            variable: $max-width
            default: "false"
            comment: |
              A `max-width` value for the to-be-centered block.
        text: |
          You, being wise, probably know that setting `margin-left: auto; margin-right: auto;` on a block element with a defined width will center that element. You probably do it all the time.

          So why a utility?

            - To make sure you're setting `margin-left` and `margin-right` when that's all you need to set &mdash; instead of also overriding `margin-top` and `margin-bottom` with a rule like `margin: 0 auto;`.
            - To organize and name the pattern, describing what is being done &mdash; you are *centering a block* &mdash; whereas `margin: auto;` does not explain itself.
            - To provide a little handy shortcut for the all-too-common pattern of setting `auto` left and right margins along with a `max-width`. (`max-width` instead of `width`, so the element shrinks with the viewport, if it comes to that &mdash; I find myself doing it that way most often.)
        example:
          html: |
            <div class="eg-center-block m-1">Variation 1</div>
            <div class="eg-center-block m-2">Variation 2</div>

      -
        name: clearfix
        type: *MP
        use-name: scut-clearfix
        text: |
          Make an element adapt its height to fit floated children, and clear floats in both directions.
        references:
          -
            description: "Treehouse blog: \"CSS Tip: A Better Clearfix with Sass\""
            url: http://blog.teamtreehouse.com/a-better-clearfix-with-sass
          -
            description: "CSS-Tricks catalogs various clearfix hacks"
            url: http://css-tricks.com/snippets/css/clear-fix/
          -
            description: "Nicholas Gallagher: \"A New Micro Clearfix Hack\""
            url: http://nicolasgallagher.com/micro-clearfix-hack/
        example:
          html: |
            <div class="eg-clearfix-container">
              <div class="eg-clearfix-floater">floated</div>
              <div class="eg-clearfix-floater">floated</div>
            </div>
          show-html: true

      -
        name: fill
        type: *MP
        use-name: scut-fill
        text: |
          Make an element fill its parent.

          This mixin positions the element absolutely, so *the parent-to-be-filled must be **positioned*** &mdash; meaning that you must assign `position: relative` to the parent if its position is not already `absolute` or `fixed`.
        example:
          html: |
            <div class="eg-fill-container">
              Parent provides the border
              <div class="eg-fill">
                Child provides the background
              </div>
            </div>
          show-html: true

      -
        name: fonticon_label
        type: *MO
        use-name: scut-fonticon-label
        args:
          -
            variable: $font
            comment: The name of your icon font
          -
            variable: $glyph
            comment: The Unicode character code for a specific icon from your icon font (please feel free to use variables)
          -
            variable: $space
            default: 0.25em
            comment: Spacing between the icon and the label
          -
            variable: $side
            default: before
            comment: |
              `before` or `after`, translating to the pseudo-element for the icon &mdash; so on which side of the label do you want the icon?
        contentblock: |
          A content block passed to this mixin will be applied to the icon (either the `:before` or `:after` pseudo-element).
        text: |
          Pair the icons from your rad icon fonts with text labels, using semantic HTML and no extraneous elements.

          By default, icons are grafted on as `inline-block` pseudo-elements, vertically centered with the label. The mixin also takes care of some common needs: it sets the `font-style` and `font-weight` to `normal` and `-webkit-font-smoothing` to `antialiased`.

          Icons can be placed on the left or right of the label and spaced according to your learn&egrave;d discretion. Additional customization is possible by either passing a content block or adding rules to the relevant pseudo-element.

          The examples below illustrate some of the possibilities.

        example:
          html: |
            <p><button class="eg-fonticon-label m-1">Play &amp; Pause</button></p>
            <p><button class="eg-fonticon-label m-2">Stop</button></p>
            <p><button class="eg-fonticon-label m-3">Fast Forwards</button></p>
            <p><button class="eg-fonticon-label m-4">Rewind</button></p>
          show-html: true

      -
        group-start: lists
        name: list_unstyled
        type: *MP
        use-name: scut-list-unstyled
        text: |
          Remove default styling (`margin`, `padding`, and `list-style-type`) from a list.
        example:
          html: |
            <ul class="eg-unstyled-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>

      -
        name: list_floated
        type: *MDP
        use-name: scut-list-floated
        args:
          -
            variable: $space
            default: "false"
            comment: Spacing to separate the floated list items.
          -
            variable: $dir
            default: left
            comment: The `float` direction.
        text: |
          Float the items of an unstyled list &mdash; to the left or to the right, with or without spacing between them.

          Use a floated list instead of an inline list when you want your list items snuggled right next to each other.

          Only the list's immediate children are floated (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-floated m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-floated m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-floated m-3">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: list_inline
        type: *MDP
        use-name: scut-list-inline
        args:
          -
            variable: $space
            default: "false"
            comment: Spacing to separate the inline list items.
        text: |
          Inline the items of an unstyled list.

          ("Inline" is a hip new verb: deploy liberally.)

          Use an inline list if you don't mind your list items spaced out a little by default, like inline words. If you need them flush, with no interstitial space, try a [floated list](#list_floated).

          Only the list's immediate children are inlined (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-inline m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-inline m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: list_punctuated
        type: &MOP mixin, with extension placeholder(s)
        use-name: scut-list-punctuated
        args:
          -
            variable: $divider
            default: "\", \""
          -
            variable: $display
            default: inline
            comment: Change to `inline-block` if you don't want your list items spanning lines.
        compatibility: |
          This utility uses the `:not` and `:last-child` selectors, which are not supported in IE8 without a polyfill.

        text: |
          Keep your HTML semantic and your punctuation traditional.

          Since the most common punctuated list uses commas, commas are the default `$divider` and the comma list is available as its own placeholder:

          - **`%scut-list-comma`**

          Only the list's immediate children are punctuated (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-punctuated-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>
            <ul class="eg-semicolon-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>
            <ul class="eg-circle-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>

      -
        name: list_divided
        type: *MOP
        use-name: scut-list-divided
        args:
          -
            variable: $divider
            default: "\"|\""
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate your dividers (on both sides) from the your list items.
          -
            variable: $dir
            default: left
            comment: The `float` direction.
          -
            variable: $height
            default: false
            comment: Manually set a height for the list items so that you can use tall dividers. See examples below.
        contentblock: |
          A content block passed to this mixin will be applied to the dividing pseudo-elements.

        text: |
          A floated list ([see above](#list_floated)) with a dividing pseudo-element between list items.

          A couple of common variations have their own placeholders:

          - **`%scut-list-bar`**
          - **`%scut-list-breadcrumb`**

          But, of course, all things are possible.

          The `$height` argument is kind of tricky: If you want a `$divider` taller than your list items, you need include a `$height` argument to ensure nice neat vertical alignment. See the example below for clarification.

          Only the list's immediate children are divided (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-bar">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-breadcrumb">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-divided m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-divided m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: margin
        type: *MO
        use-name: scut-margin
        args:
          -
            variable: $margin
            comment: |
              A list (1 to 4 values) will set margin rules on multiple sides. `n` abbreviates `null` and creates no rule.
        text: |
          A slight but useful variation on vanilla CSS's margin shorthand:

          Pass a list (1 to 4 values, not comma-separated) and `scut-margin` will

            - **create all margins as separate rules** (that is, it will not use the shorthand, but create `margin-top`, `margin-right`, etc.); and
            - **allow you to pass `n` to avoid creating a rule on any side**. (As elsewhere in Scut, `n` stands for `null` and results in no rule being created.)

          By using the mixin in this way, you will avoid some troubles that can occur when *changing* margins on an element, for whatever reason. *The point is to make it easier to override the values you want to override without affecting those you want to leave alone.*

        example:
          html: |
            <div class="eg-margin-container">
              <div class="eg-margin m-1">Variation 1</div>
            </div>
            <div class="eg-margin-container">
              <div class="eg-margin m-2">Variation 2</div>
            </div>
            <div class="eg-margin-container">
              <div class="eg-margin m-3">Variation 3</div>
            </div>

      -
        name: padding
        type: *MO
        use-name: scut-padding
        args:
          -
            variable: $padding
            comment: |
              A list (1 to 4 values) will set padding rules on multiple sides. `n` abbreviates `null` and creates no rule.
        text: |
          A slight but useful variation on vanilla CSS's padding shorthand:

          Pass a list (1 to 4 values, not comma-separated) and `scut-padding` will

            - **create all paddings as separate rules** (that is, it will not use the shorthand, but create `padding-top`, `padding-right`, etc.); and
            - **allow you to pass `n` to avoid creating a rule on any side**. (As elsewhere in Scut, `n` stands for `null` and results in no rule being created.)

          By using the mixin in this way, you will avoid some troubles that can occur when *changing* paddings on an element, for whatever reason. *The point is to make it easier to override the values you want to override without affecting those you want to leave alone.*

        example:
          html: |
            <div class="eg-padding-container">
              <div class="eg-padding m-1">Variation 1</div>
            </div>
            <div class="eg-padding-container">
              <div class="eg-padding m-2">Variation 2</div>
            </div>
            <div class="eg-padding-container">
              <div class="eg-padding m-3">Variation 3</div>
            </div>

      -
        group-start: positioning
        name: positioning_coordinates
        type: *MO
        use-name: scut-coords
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: |
              A list: `top`, `right`, `bottom`, and `left` coordinates. `n` abbreviates `null`. `a` is interchangeable with `auto`. See below.
        text: |
          A shorthand for assigning coordinates to an element.

          You *may* want to use this mixin on its own &mdash; but **this mixin's primary purpose is to facilitate the positioning mixins below**, which pair your coordinates with a `position` value.

          Some guidlines for this mixin and its followers:

          - **`n` (the default value) signifies `null` or "nothing" or "no"** &mdash; so any coordinate assigned `n` is simply ignored, creating no rule in your compiled CSS.
          - **`a` can abbreviate `auto`** (both will work).
          - **All four values must be passed**, so use `n` as needed.

          The mixins below (and their examples) below further illustrate how this works.

      -
        name: positioning_absolute
        type: *MDP
        use-name: scut-absolute
        args:
          -
            variable: $coordinates
            default: [0 n n 0]
            comment: &SEEC "<a href=\"#positioning_coordinates\">See information about `coordinates` above.</a>"
        text: |
          Absolutely position an element and assign its coordinates, all in one line of SCSS. You'll save years of your life, and probably lose weight.
        example:
          html: |
            <div class="eg-absolute-container">
              <div class="eg-absolute m-1">Top left</div>
              <div class="eg-absolute m-2">Bottom right</div>
            </div>
          show-html: true

      -
        name: positioning_relative
        type: *MO
        use-name: scut-relative
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: *SEEC
        text: |
          Relatively position an element and assign its coordinates, all in one line of SCSS.
        example:
          html: |
            <p>Some of <span class="eg-relative m-1">these</span> words <span class="eg-relative m-2">are</span> positioned in <span class="eg-relative m-3">strange</span> ways.</p>

      -
        name: positioning_fixed
        type: *MDP
        use-name: scut-fixed
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: *SEEC
        text: |
          Fixedly (*fix-ed-lee*) position an element and assign its coordinates.

          No example is provided because it would spoil this nice documentation. Check out the positioning mixins above and you'll get the picture.

      -
        name: ratio-box
        type: *MDP
        use-name: scut-ratio-box
        args:
          -
            variable: $ratio
            default: 1/1
            comment: "The ratio-box's ratio: a fraction signifying width / height. The default, 1/1, is a square. Photos and videos usually come in 4/3 or 16/9 ratios."
          -
            variable: $inner
            default: "\".scut-inner\""
            comment: &IE A CSS selector for the inner element. *Wrap your selector in quotes.*
        text: |
          Give an element with unknown or fluid width a fixed aspect ratio.

          **Implementation involves two elements**:

          - The outer element, to which the mixin applies, *whose width will determine the width of the ratio-box*.
          - The inner element, *the ratio-box itself*, whose selector must be passed to the mixin as the `$inner` (second) argument. This inner element should be an *immediate child* of the outer element (it's selected with the CSS selector `>`, the "child combinator").

          The examples should demonstrate.
        example:
          html: |
            <p>These containers have different widths, but the ratio-boxes remain squares.</p>
            <div class="eg-ratio m-1">
              <div class="scut-inner">Variation 1</div>
            </div>
            <div class="eg-ratio m-2">
              <div class="scut-inner">Variation 2</div>
            </div>
            <p>And the same principle applies to these, which maintain a 16/9 ratio and use a different classname for the inner element:</p>
            <div class="eg-ratio m-3">
              <div class="eg-ratio-inner">Variation 3</div>
            </div>
            <div class="eg-ratio m-4">
              <div class="eg-ratio-inner">Variation 4</div>
            </div>
          show-html: true
        references:
          -
            description: "Thierry Koblentz: \"Creating Intrinsic Ratios for Video\" (<cite>A List Apart</cite>)"
            url: http://alistapart.com/article/creating-intrinsic-ratios-for-video

      -
        name: size
        type: *MO
        use-name: scut-size
        args:
          -
            variable: $size
            comment: A single value will make a square; a list of two (`width` then `height`) will make a rectangle.
        text: |
          Define both of an element's dimensions in one fell swoop.

          [(You may want to read about the origin of the phrase "one fell swoop.")](http://www.straightdope.com/columns/read/1698/whats-the-origin-of-one-fell-swoop)

          If a single value is passed, it will be applied to both `width` and `height`, producing a square. To make a rectangle, pass a two-value list: `width` then `height`.
        example:
          html: |
            <div class="eg-size m-1">A square</div>
            <div class="eg-size m-2">A rectangle</div>
      -
        name: sticky_footer
        type: *MO
        use-name: scut-sticky-footer
        args:
          -
            variable: $height
            comment: The height of the footer
          -
            variable: $wrapper
            default: "\".wrapper\""
            comment: A CSS selector for the page-wrapper element. *Wrap your selector in quotes.*
          -
            variable: $footer
            default: "\".scut-sticky\""
            comment: A CSS selector for the footer. Wrap your selector in quotes.
        text: |
          Ensure that your footer stays down at the bottom of the viewport, where God intended it to be, even if your content is too short to keep it down naturally. Avoid the weird look people give you when they see your footer in the middle of their browser window and unsettling emptiness beneath.

          This one takes some commitment &mdash; but nothing you can't handle:

          - **Your sticky footer must have a fixed height.**
          - **Your stuff-above-the-footer must be wrapped in a wrapper element.** (The footer itself remains outside of this wrapper.)

          **This mixin should not be invoked within a declaration block &mdash; i.e. don't nest it.** The mixin needs to add rules for a number of elements &mdash; `html`, `body`, the wrapper, and the footer &mdash; so it can't be restricted to the context of a different selector.

          Since an example of this utility requires its own `<html>` and `<body>` elements, **[this example is relegated to Codepen](http://codepen.io/davidtheclark/pen/ExjiF)**.


        references:
          -
            description: "CSS-Tricks: \"Sticky Footer\""
            url: http://css-tricks.com/snippets/css/sticky-footer/

      -
        group-start: vertically_center
        name: v-center_line-height
        type: *MO
        use-name: scut-vcenter-lh
        args:
          -
            variable: $height
        text: |
          Vertically center text (or other inline elements) by equalizing an element's `height` and `line-height`.

          Although this method is soothingly, reassuringly simple, requiring none of the extra `<div>`'s that make us all second-guess ourselves, it is also limited. **This method only works for inline content (usually text) that will not exceed a single line.** So it's good for buttons and headings with backgrounds and things like that.

          If you need to vertically center something else, try one of the mixins below.
        example:
          html: |
            <button class="eg-vcenter-lh m-1">Vertically centered text</button>
            <button class="eg-vcenter-lh m-2">Same height, smaller font-size</button>

      -
        name: v-center_inline-block
        type: *MDP
        use-name: scut-vcenter-ib
        args:
          -
            variable: $inner
            default: "\".scut-inner\""
            comment: *IE
        text: |
          Vertically center *an inner element* with the `inline-block` method.

          **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

          Any to-be-centered element should be an *immediate child* of the container (`container > inner`).

          A word of caution: Because `inline-block` results in some unpredictable word-like spacing, this method doesn't always work well if you require exact widths (or if your inner element has a 100% width). If you require exactitude and nothing stands in the way of giving your container `display: table`, try [vertically centering via table display](#v-center_table_display).
        example:
          html: |
            <div class="eg-vcenter-ib m-1">
              <p class="scut-inner">
                A vertically centered element, with the default classname "scut-inner".
              </p>
            </div>
            <div class="eg-vcenter-ib m-2">
              <p class="eg-vcenter-ib-inner">
                A vertically centered element, with its own special classname.
              </p>
            </div>
          show-html: true

        references:
          -
            description: "CSS-Tricks: \"Centering in the Unknown\""
            url: http://css-tricks.com/centering-in-the-unknown/

      -
        name: v-center_table_display
        type: *MDP
        use-name: scut-vcenter-td
        args:
          -
            variable: $inner
            default: "\".scut-inner\""
            comment: *IE
        text: |
          Vertically center *the content of an inner element* with the `display: table` method.

          **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

          Any to-be-centered element should be an *immediate child* of the container (`container > inner`).

        example:
          html: |
            <div class="eg-vcenter-td m-1">
              <span class="scut-inner">
                A vertically centered span, with the default classname "scut-inner".
              </span>
            </div>
            <div class="eg-vcenter-td m-2">
              <div class="eg-vcenter-td-inner">
                A vertically centered div, with its own special classname.
              </div>
            </div>
          show-html: true

        references:
          -
            description: "CSS-Tricks: \"Centering in the Unknown\""
            url: http://css-tricks.com/centering-in-the-unknown/

  -
    category: typography
    items:

      -
        name: bookends
        type: *MO
        use-name: scut-bookends
        args:
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate the bookends from the element's content
          -
            variable: $content
            default: false
            comment: One or two `content` values for the pseudo-elements. Use a list to pass different content values to the left (`:before`) and right (`:after`), respectively; or pass one value to both.
        contentblock: |
          A content block passed to this mixin will be applied to both `:before` and `:after` pseudo-elements.
        text: |
          Install and style pseudo-elements on both sides of something.

          A common typographical usage is to place decorative ornaments on either side of some heading. But the mixin can prove useful for anything that involves pseudo-elements on both sides. Absolutely anything.

          Pass `false` as both arguments if you want to modify bookend pseudo-elements that have already been created. See example variation 3.

        example:
          html: |
            <div class="eg-bookends m-1">Variation 1</div>
            <div class="eg-bookends m-2">Variation 2</div>
            <button class="eg-bookends m-3">Variation 3</button>
            <div class="eg-bookends m-4">Variation 4</div>

      -
        name: characters
        type: variables
        use-name: $scut-[something]
        text: |
          A set of variables providing CSS-friendly Unicode character-codes for the kinds of typographic glyphs you may find yourself adding to your stylesheets as `content` values.

          Instead of looking them up every time, use a variable.

          The names of these variables often correspond with HTML character entity references that you can use in your markup. For example, `$scut-nbsp` is the same character as `&nbsp;` in HTML.

          Click View Source to see the full list.

      -
        name: font-face
        type: *MO
        use-name: scut-font-face
        args:
          -
            variable: $font-family
            comment: A name for the font.
          -
            variable: $file-path
            comment: The relative path to the font's files, *including the files' names (which should be the same) and excluding their extensions*.
          -
            variable: $weight
            default: normal
            comment: A `font-weight` value.
          -
            variable: $style
            default: normal
            comment: A `font-style` value.
        text: |
          Implement `font-face` best practices with the greatest of ease.

          The "best practices" to which I refer (New Bulletproof @Font-Face Syntax!!!) are explained in the Reference below.

          For example, to implement all varieties of Arvo:
          <pre class="language-scss"><code>@include scut-font-face("Arvo", fonts/arvo-regular-webfont);
          @include scut-font-face("Arvo", fonts/arvo-bold-webfont, bold);
          @include scut-font-face("Arvo", fonts/arvo-italic-webfont, normal, italic);
          @include scut-font-face("Arvo", fonts/arvo-bolditalic-webfont, bold, italic);</code></pre>

        references:
          -
            description: "Fontspring: \"The New Bulletproof @Font-Face Syntax\""
            url: http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax

      -
        name: hanging_indent
        type: *MDP
        use-name: scut-hanging-indent
        args:
          -
            variable: $indent
            default: 1em
        text: |
          The "hanging indent" applies to all lines but the first &mdash; as opposed to the "normal" indent, applying to only the first line, that you're accustomed to from those print publications you may have seen.

          My&nbsp;<cite>Chicago Manual of Style</cite>&nbsp;also calls it the <i>flush-and-hang</i> style. I like that.

          Hanging indents are standard fare for indexes and works cited, but may seem obscure to you if you're no scholar ... until one day you realize that you do need them, and have needed them all along ...
        example:
          html: |
            <div class="eg-hanging-indent m-1">Lastname, Firstname. <cite>Title of the Work</cite>. City, State: Publisher, YEAR. Print.
            </div>
            <div class="eg-hanging-indent m-2">Lastnameofanotherlady, Firstname. <cite>Title of Another Work</cite>. City, State: Publisher, YEAR. Print.
            </div>

      -
        name: indented_paragraphs
        type: *MDP
        use-name: scut-indented-ps
        args:
          -
            variable: $indent
            default: 1.5em
          -
            variable: $no-first-indent
            default: "true"
            comment: It is a not uncommon printing practice to leave the first paragraph un-indented.
        text: |
          Indent paragraphs &mdash; as tends to happen in those "books" and "magazines" that old people read.
        example:
          html: |
            <div class="eg-indented-ps m-1">
              <div><strong>Default</strong></div>
              <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.</p>
              <p>Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>
              <p>Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim.</p>
              <p>Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.</p>
            </div>
            <div class="eg-indented-ps m-2">
              <div><strong>Variant</strong></div>
              <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.</p>
              <p>Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>
              <p>Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim.</p>
              <p>Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.</p>
            </div>

      -
        name: key-value
        type: *MDP
        use-name: scut-key-val
        args:
          -
            variable: $divider
            default: "\":\""
            comment: Content (most likely punctuation) to divide the term from the description.
          -
            variable: $pad
            default: 0.25em
            comment: Horizontal space between the `$divider` and the description.
          -
            variable: $indent
            default: 1em
            comment: Indentation of the description.
          -
            variable: $spacing
            default: 0
            comment: Vertical space between term-description pairs.
          -
            variable: $pad-left
            default: 0
            comment: Horizontal space between the `$divider` and the term.
        text: |
          You've probably been wondering how to *semantically mark-up your lists of keys and values* &mdash; your labelled bits of information. You've probably been gnawing your fingernails to nubs, panicked with uncertainty. Well wait 'till you hear this: The answer seems to be *description (or <i>association</i>) lists* &mdash; the `<dl>`, `<dt>`, and `<dd>` elements. (See the References listed below.)

          WhatWG says "The dl element represents an association list consisting of zero or more name-value groups (a description list)." There you have it.

          One traditional manner of *styling* such assocation (description) lists is with colon-separated name-value pairs, the first line flush left and following lines indented (the fabled ["hanging indent"](#hanging_indent)). This mixin should help make that dream a reality. And it also enables many other common key-value formats, a couple of which are shown in the examples below.

          **Apply the mixin to your `<dl>` element.**
        example:
          html: |
            <dl class="eg-key-val m-1">
              <dt>Name</dt>
              <dd>Lorem Ipsum</dd>
              <dt>Occupation</dt>
              <dd>Placeholder</dd>
              <dt>Children</dt>
              <dd>None</dd>
              <dt>Excuses</dt>
              <dd>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. </dd>
            </dl>
            <dl class="eg-key-val m-2">
              <dt>Consolation</dt>
              <dd>Alleviation of misery or distress of mind</dd>
              <dt>Depression</dt>
              <dd>A sinking of the spirits</dd>
              <dt>Equanimity</dt>
              <dd>A state of resistance to elation, depression, anger, etc.</dd>
            </dl>
            <dl class="eg-key-val m-3">
              <dt>Doom</dt>
              <dd>Fate decreed or determined; fixed fortune; irrevocable destiny.</dd>
              <dt>Waggle</dt>
              <dd>To cause to wag frequently and with short motions; move first one way and then the other.</dd>
              <dt>Pantaloon</dt>
              <dd>In early Italian comedy, a character usually represented as a lean and foolish old man (properly a Venetian), wearing spectacles and slippers.</dd>
            </dl>
          show-html: true
        references:
          -
            description: WhatWG on the `<dl>` element
            url: "http://www.whatwg.org/specs/web-apps/current-work/multipage/grouping-content.html#the-dl-element"
          -
            description: HTML5 Doctor on the `<dl>` element
            url: "http://html5doctor.com/the-dl-element/"

      -
        name: link_bottom-bordered
        type: *MDP
        use-name: scut-link-bb
        args:
          -
            variable: $color
            default: inherit
            comment: A `border-bottom-color` value.
          -
            variable: $style
            default: solid
            comment: A `border-bottom-style` value.
          -
            variable: $width
            default: 1px
            comment: A `border-bottom-width` value.
        text: |
          Replace standard link underlining with a bottom border.

          People seem to like this trick, at least some people, because it provides a little extra space between the text and the line. Other pleasing effects are also possible by passing arguments.

          Of course, as always, you can add your own rules after the mixin to further customize. For example, if you want to define a special color for the bottom-border on hover, just do it (see the example below).
        example:
          html: |
            <p class="eg-link-bb m-1">Default values: <a href="#link-with-bottom-border">Link text</a></p>
            <p class="eg-link-bb m-2">Variant values: <a href="#link-with-bottom-border">Link text</a></p>

      -
        name: reverse_italics
        type: *MDP
        use-name: scut-reverse-italics
        args:
          -
            variable: $elements
            default: "false"
            comment: "A list (not comma separated) of CSS selectors for elements that you do not want italicized (`<em>`, `<cite>`, and `<i>` are already taken care of: see below). *Wrap your selectors in quotes.*"
        text: |
          Italicize a section of text while de-italicizing those elements that would normally be italicized. Stand the world on its head.

          This is common typographical practice. In non-italicized text, italics provide mild stress; but in an italicized passage, it is the *non-italicized* text that is stressed. (Everything is relative and nothing means anything.)

          The elements `<em>`, `<cite>`, and `<i>`, which browsers typically italicize, are by default de-italicized. To de-italicize more elements, include their selectors in a list that you pass to the mixin.

        example:
          html: |
            <p class="eg-reverse-italics m-default">DEFAULT:
              <em>Some &lt;em&gt; text</em> sit amet, consectetuer adipiscing elit.
              <cite>Some &lt;cite&gt; text</cite>, aenean commodo ligula eget dolor.
              <strong>Some &lt;strong&gt; text</strong> Cum sociis natoque penatibus
              <i>some &lt;i&gt; text</i> et magnis dis parturient montes, nascetur ridiculus mus
              <b>some &lt;b&gt; text</b>.
              <span class="no-italics">And a &lt;span&gt; with the classname "no-italics".</span>
            </p>
            <p class="eg-reverse-italics m-variant">VARIANT:
              <em>Some &lt;em&gt; text</em> sit amet, consectetuer adipiscing elit.
              <cite>Some &lt;cite&gt; text</cite>, aenean commodo ligula eget dolor.
              <strong>Some &lt;strong&gt; text</strong> Cum sociis natoque penatibus
              <i>some &lt;i&gt; text</i> et magnis dis parturient montes, nascetur ridiculus mus
              <b>some &lt;b&gt; text</b>.
              <span class="no-italics">And a &lt;span&gt; with the classname "no-italics".</span>
            </p>
          show-html: true

      -
        name: side-lined
        type: *MDP
        use-name: scut-side-lined
        args:
          -
            variable: $height
            default: 1px
            comment: The height of the lines.
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate the text and the lines.
          -
            variable: $color
            default: inherit
            comment: The color of the lines.
          -
            variable: $style
            default: solid
            comment: The `border-style` of the lines.
          -
            variable: $v-adjust
            default: false
            comment: Vertical adjustment to the lines, adding space *from the bottom*. See examples below.
          -
            variable: $double
            default: false
            comment: Double your lines by adding *a value for the distance between the two lines you want*.
        text: |
          Woman- and mankind have always loved this flourish: horizontal lines extending from either side of center-aligned text.

          Look at the examples below. You want to do that!

          By default, the lines will be vertically aligned with the text's centerline &mdash; but sometimes that will look off to your discerning eye, and you'll want to tweak that vertical position. So add some height to the `$v-adjust` argument, which will push your lines up, away from the bottom of the element.

          By default, the mixin produces one line; but if you add a height value to the `$double` argument, you'll get two lines (separated by that height). (You could also use a `$style` of `double`, which would act the same as any double border-style.)
        example:
          html:
            <p class="eg-side-lined m-1">Variation 1</p>
            <p class="eg-side-lined m-2">Variation 2</p>
            <p class="eg-side-lined m-3">Variation 3</p>
            <p class="eg-side-lined m-4">Variation 4</p>

  -
    category: functions
    items:

      -
        name: pixels-to-ems
        type: function
        use-name: scut-em
        args:
          -
            variable: $pixels
            comment: The `px`-value you wish to convert to `em`s.
          -
            variable: $base
            default: 16
            comment: A base-value with which to calculate the `em`-value. If there are no units, it's interpreted as *pixels*; but you can use `em`-values, as well.
        text: |
          Convert pixel-values to `em`-values.

          This function eases the burden on those who build flexible, `em`-based layouts but still find themselves thinking in pixels or using tools that speak in pixels.

          It provides some flexibility for situations in which the `em`-value has to be calculated in relation to something other than a default `16px` `font-size`.

          If a `$base` argument is provided, the `em`-value will be calculated relative to that `$base` (by default, `$base` is assumed to be `16`). If that `$base` is in pixels, everything should work smoothly, no questions asked. *You can also provide a `$base` in ems* &mdash; but this is trickier: it will only work if your `em`s are not more than one layer deep.

          <small>(For example, if your element is the child of a container whose `font-size` is an `em`-value other than `1em`, you can pass the `font-size` as the `$base` argument and everything will work fine (see example variations 5 and 6), But if the container has a `font-size` in `em`s (not `1em`), and a child of it has a `font-size` in `em`s (also not `1em`), and your messing with a grandchild ... things will go wrong. So, again, I don't suggest trying to use this function three or more levels deep in `em`s.)</small>
        example:
          html: |
            <div class="eg-em-c">
              <div class="eg-em m-1">
                Variation 1: 300px wide, in ems
              </div>

              <div class="eg-em m-2">
                Variation 2: 300px wide, in regular pixels
              </div>

              <div class="eg-em m-3">
                Variation 3: 400px wide, in ems, with a different base size in px
              </div>

              <div class="eg-em m-4">
                Variation 4: 400px wide, in pixels, with a different base size in px
              </div>

              <div class="eg-em m-5">
                Variation 5: 500px wide, in ems, with a different base size in ems
              </div>

              <div class="eg-em m-6">
                Variation 6: 500px wide, in pixels, with a different base size in ems
              </div>
            </div>

      -
        name: strip_unit
        type: function
        use-name: scut-strip-unit
        args:
          -
            variable: $num
            comment: The number whose units you want to strip.
        text: |
          Strip the unit from a number.

          This becomes useful when you are building your own mixins and functions and find yourself in an error-littered tangle of units. With this function you can just ditch those units, then put them back later.

          No example necessary.

help:
  -
    term: use-name
    text: |
      **use-name** is the name of the utility as it is used (as a mixin, placeholder, function, variable, etc.), including the `scut-` prefix. It's what you plug into your Sass/SCSS. This should be illustrated in the examples.
  -
    term: type
    text: |
      **type** tells you what kind of Sass feature the utility involves. Is it only available as a mixin (e.g. HD breakpoint)? Or as a mixin and a placeholder that always do the same thing (e.g. clearfix)? Or as a mixin and a placeholder that passes default values (e.g. indented paragraphs)? Or as a mixin with some extension placeholders for common variations (e.g. punctuated list)? As a function, a variable, an import? And so on.
  -
    term: arguments
    text: |
      **arguments** lists the arguments, in order, that you can pass to the utility's mixin. To learn more about Sass/SCSS mixin arguments [have a look at the Sass documentation](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixin-arguments).

      If no default value is listed, that means there is no default value, so you'll have to provide a value every time you use the mixin.
  -
    term: contentblock
    text: |
      **@content** describes what happens if you pass a content block to the utility's mixin. To understand Sass content blocks, [have a look at the Sass documentation](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content).
